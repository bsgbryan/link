// Generated by CoffeeScript 1.8.0
(function() {
  var client, ignore, microtime, q, redis, required_quality, required_trust;

  q = require('q');

  redis = require('node-redis');

  client = redis.createClient();

  microtime = require('microtime');

  required_trust = 0.51;

  required_quality = 0.90;

  ignore = function(cat) {
    return (cat != null ? cat.indexOf('Shopping') : void 0) === 0 || (cat != null ? cat.indexOf('Retailer') : void 0) >= 0 || cat === 'Internet_and_Telecom/Social_Network' || cat === 'Career_and_Education/Universities_and_Colleges' || cat === 'Reference/Dictionaries_and_Encyclopedias' || cat === 'Finance/Insurance' || cat === 'Internet_and_Telecom/Ad Network' || cat === 'Internet_and_Telecom/Chats and Forums' || cat === 'Internet_and_Telecom/Domain Names and Register' || cat === 'Internet_and_Telecom/Email' || cat === 'Internet_and_Telecom/File_Sharing' || cat === 'Internet_and_Telecom/Mobile_Developers' || cat === 'Internet_and_Telecom/Online_Marketing' || cat === 'Internet_and_Telecom/Search_Engine' || cat === 'Internet_and_Telecom/Social_Network' || cat === 'Internet_and_Telecom/Telecommunications';
  };

  module.exports = {
    add_author: function(author, article, source) {
      var deferred, time, transaction;
      time = microtime.now();
      transaction = client.multi();
      deferred = q.defer();
      transaction.zincrby('authors:counts', 1, author).zincrby("authors:" + author + ":sources", 1, source).zadd("authors:" + author + ":articles", time, article).exec(function(err) {
        if (err != null) {
          return deferred.reject(err);
        } else {
          return deferred.resolve();
        }
      });
      return deferred.promise;
    },
    add_source: function(guid, details) {
      var deferred, time, transaction;
      time = microtime.now();
      transaction = client.multi();
      deferred = q.defer();
      if (details.trustable > required_trust && details.quality > required_quality && ignore(details.category) === false) {
        transaction.zadd('categories', time, details.category).zadd("" + category + ":sources", time, guid).zadd('sources:gold', time, guid).hmset("sources:gold:" + guid, details);
      } else {
        transaction.hmset("sources:rejected:" + guid, details).zadd('sources:rejected', time, guid);
      }
      transaction.hincrby('sources', 'count', 1).exec(function(err) {
        if (err != null) {
          return deferred.reject(err);
        } else {
          return deferred.resolve();
        }
      });
      return deferred.promise;
    }
  };

}).call(this);
